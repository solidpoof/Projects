pragma solidity 0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract LockPayFactory is Ownable {
    using EnumerableSet for EnumerableSet.AddressSet;
    using SafeMath for uint;

    address public generator;

    EnumerableSet.AddressSet private lockers;
    
    event lockerRegistered(address lockerContract);
    event generatorUpdated(address generatorContract);

    modifier onlyGenerator {
        require(generator == msg.sender, "LockPay: FORBIDDEN");
        _;
    }
    
    /**
    * @notice Updates LockPay Generator contract address.
    * @param _generator New generator address.
    */
    function adminUpdateGeneratorAddress(address _generator) external onlyOwner {
        require(_generator != address(0), "LockPay: INVALID_ADDRESS");
        generator = _generator;

        emit generatorUpdated(generator);
    }

    /**
     * @notice called by a registered LockPayGenerator upon Locker creation
     */
    function registerLocker (address _lockerAddress) external onlyGenerator {
        require(_lockerAddress != address(0), "LockPay: INVALID_ADDRESS");
        lockers.add(_lockerAddress);
        emit lockerRegistered(_lockerAddress);
    }
    

    /**
     * @notice returns true if the locker address was generated by the LockPay Locker platform
     */
    function lockerIsRegistered(address _lockerAddress) external view returns (bool) {
        return lockers.contains(_lockerAddress);
    }
    
    /**
     * @notice The length of all lockers on the platform
     */
    function lockersLength() external view returns (uint256) {
        return lockers.length();
    }
    
    /**
     * @notice gets a locker at a specific index. Although using Enumerable Set, since lockers are only added and not removed, indexes will never change
     * @return the address of the locker contract at index
     */
    function lockerAtIndex(uint256 _index) external view returns (address) {
        return lockers.at(_index);
    }
}